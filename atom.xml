<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>fubst0318</title>
  <subtitle>Stay Foolish,Stay Hungry</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-06-22T01:47:29.063Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Tony Xu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Nodejs知识点</title>
    <link href="http://yoursite.com/2017/06/20/Nodejs%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://yoursite.com/2017/06/20/Nodejs知识点/</id>
    <published>2017-06-20T07:09:44.000Z</published>
    <updated>2017-06-22T01:47:29.063Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><h1 id="创建事件发射器"><a href="#创建事件发射器" class="headerlink" title="创建事件发射器"></a>创建事件发射器</h1><p>2种实现方法，<code>util.inherits(constructor,superConstructor)</code>或者使用ES6的<code>class</code>和<code>extends</code>关键字。<br>使用ES6实现的具体实例:  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>);</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyStream</span> <span class="keyword">extends</span> <span class="title">EventEmitter</span></span>&#123;</div><div class="line">    write(data) &#123;</div><div class="line">        <span class="keyword">this</span>.emit(<span class="string">"data"</span>,data);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> mystream = <span class="keyword">new</span> MyStream();</div><div class="line">mystream.on(<span class="string">"data"</span>,(data)=&gt;&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">`接收的数据: "<span class="subst">$&#123;data&#125;</span>"`</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">mystream.write(<span class="string">"使用 ES6"</span>)；</div></pre></td></tr></table></figure>
</li>
<li><h1 id="fs-模块"><a href="#fs-模块" class="headerlink" title="fs 模块"></a>fs 模块</h1></li>
</ul>
<ul>
<li><h1 id="NODE中的全局变量"><a href="#NODE中的全局变量" class="headerlink" title="NODE中的全局变量"></a>NODE中的全局变量</h1><ol>
<li>process对象</li>
<li></li>
</ol>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;h1 id=&quot;创建事件发射器&quot;&gt;&lt;a href=&quot;#创建事件发射器&quot; class=&quot;headerlink&quot; title=&quot;创建事件发射器&quot;&gt;&lt;/a&gt;创建事件发射器&lt;/h1&gt;&lt;p&gt;2种实现方法，&lt;code&gt;util.inherits(constructor,su
    
    </summary>
    
      <category term="后端" scheme="http://yoursite.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="Nodejs" scheme="http://yoursite.com/tags/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title>css知识点一览</title>
    <link href="http://yoursite.com/2017/06/19/css%E7%9F%A5%E8%AF%86%E7%82%B9%E4%B8%80%E8%A7%88/"/>
    <id>http://yoursite.com/2017/06/19/css知识点一览/</id>
    <published>2017-06-18T22:50:50.000Z</published>
    <updated>2017-07-07T23:38:33.672Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><h1 id="盒模型概述"><a href="#盒模型概述" class="headerlink" title="盒模型概述"></a>盒模型概述</h1><p>  内边距出现在内容区域的周围。如果在元素上添加背景，那么背景会应用于由内容和内边距组成的区域。因此，我们常常使用内边距在内容周围创建一个隔离带，使内容不会与背景混在一起。添加边框会在内边距的区域外加一条线。这条线可以有多种样式，比如实线、虚线或点线。在边框外边的是外边距。外边距是透明的。一般使用它控制元素之间的间隔。<br>  在CSS中，<code>width</code>和<code>height</code>指的是内容区域的宽度和高度。增加内边距、边框和外边距不会影响内容区域的尺寸，但是会增加元素框的总尺寸。假设框的边个边上有10像素的外边距和5像素的内边距，如果希望这个框达到100像素宽，就需要将内容的宽度设置为70像素。<br>  内边距、边框和外边距可以应用于一个元素的所有边，也可以应用于单独的边。外边距还可以是负值，这可以用在多种技术中。</p>
</li>
<li><h1 id="三种定位模型"><a href="#三种定位模型" class="headerlink" title="三种定位模型"></a>三种定位模型</h1><ol>
<li>普通流–相对定位<br>除非专门指定，否则所有框都在普通流中定位。<br>块级框从上到下一个接一个地垂直排列，框之间的垂直距离由框的垂直外边距计算出来。(p,h1或div等元素为块级元素，strong和span等元素称为行内元素)<br>相对定位实际上被看做普通流定位模型的一部分，因为元素的位置是相对于它在普通流中的位置的。<br>例子：<code>#myBox{position:relative;left:20px;top:20px}</code></li>
<li>绝对定位<br>绝对定位使元素的位置与文档流无关，因此不占据空间。普通文档流中其他元素的布局就像绝对定位的元素不存在时一样。<br>绝对定位的元素的位置是相对于距离它最近的那个已定位的祖先元素确定的。如果元素没有已定位的祖先元素，那么它的位置是相对于初始包含块的。根据用户代理的不同，初始包含块可能是画布或HTML元素。<br>与相对定位的框一样，绝对定位的框可以从它的包含块向上、下、左、右移动。这提供了极大的灵活性，你可以直接将元素定位在页面的任何位置。<br><strong>固定定位</strong><br>固定定位是绝对定位的一种。差异在于固定元素的包含块是视口(viewport)。这使我们能够创建总是出现在窗口中相同位置的浮动元素。</li>
<li>浮动<br>浮动框可以左右移动，直到它的外边缘碰到包含框或另一个浮动框的边缘。因为浮动框不在文档的普通流中，所以文档的普通流中的块框表现得就像浮动框不存在一样。 </li>
</ol>
</li>
<li><h1 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h1><ol>
<li><p>选择器分组<br><code>h2, p {color:gray}</code> h2和p选择器对应内容的颜色为灰色</p>
</li>
<li><p>多类选择器<br><code>.warning{font-weight:bold;} .urgent{font-style:italic;} .warning.urgent{background:silver}</code>对应的HTML内容为<code>&lt;p class=&quot;urgent warning&quot;&gt;When handling plutonium...&lt;/p&gt;</code>;其中class中的多类以空格分开</p>
</li>
<li><p>ID选择器<br>ID选择器不能结合使用，因为ID选择器不允许有以空格分隔的词列表(比较上述的2.多类选择器)</p>
</li>
<li><p>属性选择器<br>4.1 简单属性选择器<br>选择有class属性(值不限)的所有h1元素，使其文本为银色，写作<br><code>h1[class] {color:silver;}</code>，对应的HTML标记为<code>&lt;h1 class=&quot;hoopla&quot;&gt;Hello&lt;/h1&gt; &lt;h1 class=&quot;severe&quot;&gt;Serenity&lt;/h1&gt; &lt;h1 class=&quot;fancy&quot;&gt;Fooling&lt;/h1&gt;</code><br>可以根据多个属性进行选择，只需将属性选择器链接在一起即可。例如，将同时有href和title属性的HTML超链接的文本置为粗体，可写作:<code>a[href][title]{font-weight:bold;}</code><br>4.2 部分属性值选择<br>选择器中出现了一个波浪号(~),则根据属性值的任意一个词进行选择。<br><code>img[title~=&quot;Figure&quot;] {border:1px solid gray;}</code>只选择title属性值中有Figure的内容设置边框。</p>
</li>
<li><p>后代选择器<br>只与h1中包含em元素的内容匹配<br><code>h1 em {color:gray;}</code><br>说明：后代选择器中，两个元素之间的层次间隔可以是无限的。比如，如果写作<code>ul em</code>,则会选择从ul元素继承的所有em元素，而不论em嵌套的层次多深。<br>5.1 子元素选择器<br><code>h1&gt;p {color:red}</code>,只选择h1中子元素为p的内容。<br>复杂的例子为<code>table.summary td&gt;p {font-weight:bold}</code><br>5.2 相邻兄弟元素<br>选择紧接在另一个元素后的元素，而且两者有相同的父元素。可以使用相邻兄弟结合符，表示为一个加号(+)。<br>例子：去除紧接在一个h1元素后出现的段落的上边距，写作:<code>h1 + p {margin-top:0;}</code></p>
</li>
<li><p>伪类和伪类选择器<br>伪类选择器的写法:<code>a:visited {color:blue;}</code> 连接伪类包括<code>:visited</code>以及<code>:link</code>。</p>
<p>6.1 动态伪类<br>:focus 指示当前拥有输入焦点的元素，也就是说，可以接受键盘输入或者能以某种方式激活的元素。<br>:hover 描述鼠标指针停留在哪个元素上，例如，鼠标指针可能停留在一个超链接上，:hover就会提示这个链接。<br>:active 指示被用户输入激活的元素。例如,鼠标指针停留在一个超链接上时，如果用户点击鼠标，就会激活这个超链接,:active将指示这个超链接。<br>动态伪类可以应用到任何元素，对非链接的元素应用动态样式通常很有用。<br>例如，使用以下标记:<br><code>input:focus {background:silver;font-weight:bold;}</code> 可以突出显示一个准备接受键盘输入的表单元素。</p>
<p>6.2 选择第一个子元素<br><code>p:first-child {font-weight:bold}</code>,整个HTML文件中作为第一个子元素的p元素应用字体加粗样式。</p>
<p>6.3 伪元素选择器<br>CSS2.1中定义了4个伪元素：设置首字母样式、设置第一行样式、设置之前或者之后元素的样式。其中，首字母样式以及第一行样式的设定是有一定的元素以及属性限制的。  </p>
<p>6.3.1 设置首字母样式<br>第一个伪元素用于设置一个块级元素首字母的样式，而且仅对该首字母设置样式:<br><code>p:first-letter {color:red;}</code>或者 <code>h2:first-letter {font-size:200%;}</code></p>
<p>6.3.2 设置第一行样式<br>:first-line可以用来影响元素中的第一个文本行。例子:<code>p:first-line {color:purple;}</code></p>
<p>6.3.3 设置之前之后样式<br>使用伪元素<code>:before</code>和<code>:after</code>直接设置样式。<br>在每个h2元素前加<code>hello world</code><br><code>h2:before {content:&quot;hello world&quot;;color:silver;}</code></p>
<ol>
<li>选择器的特殊性值设定<br>特殊性值表述为4个部分，如:<code>0,0,0,0</code>。<br>一个选择器的具体特殊性如下确定:  </li>
</ol>
</li>
</ol>
<ul>
<li>对于选择器中给定的各个ID属性值，加 <code>0,1,0,0</code>。</li>
<li>对于选择器中给定的各个类属性值、属性选择或伪类,加 <code>0,0,1,0</code>。</li>
<li>对于选择器中给定的各个元素和伪元素，加<code>0,0,0,1</code>。</li>
<li>结合符和通配选择器对特殊性没有任何贡献。特殊性为<code>0,0,0,0</code></li>
<li>内联样式特殊性为<code>1,0,0,0</code>  </li>
</ul>
<ol>
<li>重要性<br>重要性声明，声明结束分号之前插入 <code>!important</code>标志。表名，某个声明非常重要，超过了所有其他声明。</li>
</ol>
</li>
<li><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><p>  基于继承机制，样式不仅应用到指定的元素，还会应用到它的后代元素。例如,如果向一个h1元素应用一个颜色，那么这个颜色将应用到h1中的所有文本，甚至应用到该h1的子元素的文本。<code>h1 {color:gray;}</code>对应的HTML代码为<code>&lt;h1&gt;Meerkat &lt;em&gt;Central&lt;/em&gt;&lt;/h1&gt;</code>其中,h1以及em的文本都会变为灰色。<br>  说明的几点：1.有些属性不能继承，比如边框等。2.集成的属性没有特殊性，甚至连0特殊性也没有。</p>
</li>
<li><h1 id="层叠规则"><a href="#层叠规则" class="headerlink" title="层叠规则"></a>层叠规则</h1><ol>
<li>按显示权重对应用到该元素的所有声明排序。标志<code>!important</code>规则的权重要高于没有<code>!important</code>标志的规则。按来源对应用到给定元素的所有声明排序。共有3种来源:创作人员、读者和用户代理。正常情况下，创作人员的样式要胜过读者的样式。有<code>!important</code>标志的读者样式要强于所有其他样式，这包括有<code>!important</code>标志的创作人员样式。创作人样式和读者样式都比用户代理的默认样式要强。  </li>
<li>按特殊性对应用到给定元素的所有声明排序。有较高特殊性的元素权重要大于有较低特殊性的元素。  </li>
<li>按出现顺序对应用到给定元素的所有声明排序。一个声明在样式表或文档中越后出现，它的权重就越大。如果样式表中有导入的样式表，一般认为出现在导入样式表的声明在前，主样式表中的所有声明在后。  </li>
</ol>
</li>
<li><h1 id="相对长度单位"><a href="#相对长度单位" class="headerlink" title="相对长度单位"></a>相对长度单位</h1><ol>
<li>em 单位<br>在CSS中，1个”em”定义为一种给定字体的font-size值。如果一个元素的font-size为14像素，那么，对于该元素,1em就等于14像素。<br><code>h1 {font-size:24px;} h2{font-size:18px;} p{font-size:12px;} h1,h2,p{margin-left:1em;} small {font-size:0.8em;}</code>对应的HTML元素为<code>&lt;h1&gt;Left margin = &lt;small&gt;24 pixels&lt;/small&gt;&lt;h1&gt; &lt;h2&gt;Left margin = &lt;small&gt;18pixels&lt;/small&gt;&lt;/h2&gt; &lt;p&gt;Left margin = &lt;small&gt;12 pixels&lt;/small&gt;&lt;/p&gt;</code>  </li>
</ol>
</li>
<li><h1 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h1><p>  CSS字体处理中最复杂的部分为字体系列(font-family)匹配和字体加粗(font-weight)匹配，其次是字体大小(font-size)计算。<br>  字体样式的所有这些方面都集中到一个属性，即font。  </p>
</li>
<li><h1 id="文本属性"><a href="#文本属性" class="headerlink" title="文本属性"></a>文本属性</h1><ol>
<li>缩进文本<br>使用<code>text-indent</code>属性,例如:<code>p {text-indent:3em; }</code> </li>
<li>垂直对齐文本<br>使用<code>vertical-align</code>属性，但该属性只应用于行内元素和替换元素，如图像和表单输入元素。<code>vertical-align</code>属性不能继承。</li>
<li>文本转换<br>使用<code>text-transform</code>属性，调整文本大小写。具体的值包括:<code>uppercase</code>,<code>lowercase</code>,<code>capitalize</code>,<code>none</code>,<code>inherit</code>   </li>
<li>文本装饰<br>可选值:<code>none || underline || overline || line-through || blink || inherit</code>。</li>
</ol>
</li>
<li><h1 id="基本视觉格式化"><a href="#基本视觉格式化" class="headerlink" title="基本视觉格式化"></a>基本视觉格式化</h1><ol>
<li>块级元素声明<br>通过声明<code>display:block</code>，可以让元素生成块级框。  </li>
<li>行内元素<br>通过声明<code>display:inline</code>,可以让元素生成一个行内框。  </li>
<li>改变元素显示<br><code>display</code>属性，包括的值有<code>inline || block || run-in</code>等。<br>其中,<code>run-in</code>值，可以使某些块级元素成为下一个元素的行内部分。  </li>
</ol>
</li>
<li><h1 id="颜色和背景"><a href="#颜色和背景" class="headerlink" title="颜色和背景"></a>颜色和背景</h1><ol>
<li>使用背景图像<br>使用属性<code>background-image</code>属性。允许向任何元素应用背景图像，可以是块级元素也可以是行内元素。当然，大多数背景都应用到body元素中。<br>有方向的平铺，使用<code>background-repeat</code>属性，该属性共有如下值,<code>repeat | repeat-x | repeat-y | no-repeat | inherit</code><br>背景定位，使用<code>background-position</code>属性，代表性的值包括<code>left | center | right | &lt;length&gt; | &lt;percentage&gt;</code>等。<br>使用属性<code>background-attachment</code>，可以声明原图像相对于可视区是固定的，不受滚动影响。该属性的值包括<code>scroll | fixed | inherit</code>。</li>
</ol>
</li>
<li><h1 id="浮动和定位"><a href="#浮动和定位" class="headerlink" title="浮动和定位"></a>浮动和定位</h1><ol>
<li>浮动使用属性<code>float</code>实现<br><code>float</code>属性的值包括<code>left | right | none |inherit</code>。<br>浮动元素的包含块是其最近的块级祖先元素。<br>浮动元素会生成一个块级框，不论元素本身是什么。</li>
</ol>
</li>
<li><h1 id="表布局"><a href="#表布局" class="headerlink" title="表布局"></a>表布局</h1><ol>
<li>表单元格边框<br>可使用属性<code>border-collapse</code>来在分隔边框模型和合并边框模型中进行选择。<br><code>border-collapse</code>属性值包括<code>collapse</code>和<code>separate</code>。其中前者是合并边框，后者是分隔模型。</li>
</ol>
</li>
<li><h1 id="列表项"><a href="#列表项" class="headerlink" title="列表项"></a>列表项</h1><ol>
<li>使用属性<code>list-style-type</code>可改变列表项的标志类型。<br>比如，常见的值包括：<code>disc</code>、<code>circle</code>、<code>square</code>、<code>decimal</code>等，默认的为前者。</li>
<li>列表项图像<br>若希望将列表的常规标志改为图像，则可以使用<code>list-style-image</code>属性。<br>举例:<code>ul li {list-style-image:url(ohio.gif);}</code><br>通常可以提供一个作为“后路”的标志类型来应付意外情况，如图像未能加载、被破坏或者是某种用户代理无法显示的格式等。<br>举例：<code>ul li {list-style-image:url(ohio.gif);list-style-type:square;}</code></li>
</ol>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;h1 id=&quot;盒模型概述&quot;&gt;&lt;a href=&quot;#盒模型概述&quot; class=&quot;headerlink&quot; title=&quot;盒模型概述&quot;&gt;&lt;/a&gt;盒模型概述&lt;/h1&gt;&lt;p&gt;  内边距出现在内容区域的周围。如果在元素上添加背景，那么背景会应用于由内容和内边距组成的区域。因
    
    </summary>
    
      <category term="大前端" scheme="http://yoursite.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="CSS3" scheme="http://yoursite.com/tags/CSS3/"/>
    
  </entry>
  
  <entry>
    <title>知识点</title>
    <link href="http://yoursite.com/2017/06/15/HTTP%E5%8D%8F%E8%AE%AE%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://yoursite.com/2017/06/15/HTTP协议知识点/</id>
    <published>2017-06-15T02:37:10.000Z</published>
    <updated>2017-06-16T06:42:09.151Z</updated>
    
    <content type="html"><![CDATA[<h3 id="强化知识点"><a href="#强化知识点" class="headerlink" title="强化知识点"></a>强化知识点</h3><ul>
<li><p>HEAD 请求方法<br>  只请求页面的首部</p>
</li>
<li><p>POST 和 PUT 方法区别<br>  PUT方法是幂等的<br>  POST方法不幂等。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;强化知识点&quot;&gt;&lt;a href=&quot;#强化知识点&quot; class=&quot;headerlink&quot; title=&quot;强化知识点&quot;&gt;&lt;/a&gt;强化知识点&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;HEAD 请求方法&lt;br&gt;  只请求页面的首部&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;POST 和 P
    
    </summary>
    
      <category term="大前端" scheme="http://yoursite.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="HTTP" scheme="http://yoursite.com/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript知识点</title>
    <link href="http://yoursite.com/2017/06/10/JavaScript%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://yoursite.com/2017/06/10/JavaScript知识点/</id>
    <published>2017-06-10T02:24:11.000Z</published>
    <updated>2017-06-15T21:58:36.536Z</updated>
    
    <content type="html"><![CDATA[<h3 id="待提升知识点"><a href="#待提升知识点" class="headerlink" title="待提升知识点"></a>待提升知识点</h3><ul>
<li><code>call</code>以及<code>apply</code>函数方法的更多应用</li>
</ul>
<h3 id="强化知识点"><a href="#强化知识点" class="headerlink" title="强化知识点"></a>强化知识点</h3><ul>
<li><p><code>html</code>的<code>name</code>属性<br>  区别于id,name属性的值不是必须唯一。<br>  和id不一样，name属性只在少数HTML元素中有效。包括表单、表单元素、<code>&lt;iframe&gt;</code>和<code>&lt;img&gt;</code>元素。<br>  基于name属性的值选取HTML元素，可以使用Document对象的getElementsByName()方法：<br>  <code>var radiobuttos = document.getElementByName(&quot;favorite_color&quot;);</code></p>
</li>
<li><p>通过标签名获取元素<br>  例子：<code>var spans= document.getElementByTagName(&quot;span&quot;);</code><br>  该方法返回的是一个NodeList对象 所以选取第一个<code>&lt;p&gt;</code>元素的方法为 <code>var firstpara = document.getElementByTagName(&quot;p&quot;)[0];</code></p>
</li>
<li><p>HTML元素<br>  <code>&lt;a&gt;</code>代表超链接,href属性值为链接地址</p>
</li>
<li><p>CSS 知识点</p>
<ol>
<li>css外文件引入<br>例子: <code>&lt;link rel=&quot;stylesheet&quot; href=&quot;mystyles.css&quot; type=&quot;text/css&quot;&gt;</code></li>
<li>元素可见性设置<br>影响文档可见性的两个属性:<code>visibility</code>和<code>display</code>。前者当值设置为<code>hidden</code>时，不显示。<code>display</code>属性更加通用。指定元素是否为块状元素、内联元素、列表项等。如果<code>display</code>设置为<code>none</code>,受影响的元素将不显示，甚至根本没有布局。<br><code>visibility</code>和<code>display</code>属性之间的差别可以从他们对使用静态者相当定位的元素的影响中看到。对于一个常规布局流中的元素，设置<code>visibility</code>属性为<code>hidden</code>使得元素不可见，但是在文档布局中仍保留了空间。类似的元素可以重复隐藏和显示而不改变文档布局。但是，如果元素的<code>display</code>属性设置为<code>none</code>,在文档布局中不再给它分配空间，它各边的元素会合拢，就当它从来不存在。例如，在创建展开和折叠轮廓的效果时，<code>display</code>属性很有用。</li>
<li>脚本化内联样式<br>脚本化CSS最直截了当的方法就是更改单独文档元素的<code>style</code>属性。类似大多数HTML属性，style属性也是元素对象的属性，它可以在Javascript中操作。但是style属性不同寻常：它的值不是字符串，而是一个CSSStyleDeclartation对象。该style对象的JavaScript属性代表了HTML代码中通过style指定的CSS属性。<br>例如：让元素e的文本变成大号、加粗和蓝色，可以使用如下代码设置font-size\font-weight和color等样式属性对应的JavaScript属性.<br><code>e.style.fontSize=&quot;24pt&quot;; e.style.fontWeight=&quot;bold&quot;; e.style.color=&quot;blue&quot;;</code><br>定位属性需要包含单位。因此，如下代码是错误的：<br><code>e.style.left=300;</code> //错误：是数字不是字符串<br><code>e.style.left=&quot;300&quot;;</code> //错误：缺少单位<br><code>e.style.left=&quot;300px&quot;;</code><br>有时，作为单个字符串值来设置或查询元素的内联样式反而比作为CSSStyleDeclaration对象更为简单。为此，可以使用元素的getAttribute()和setAttribute()方法或CSSStyleDeclaration对象的cssText属性来实现：<br>// 两者都可设置e的样式属性为字符串s<br><code>e.setAttribute(&quot;style&quot;,s);  e.style.cssText=s;</code><br>// 两者都可查询元素的内联样式<br><code>s=e.getAttribute(&quot;style&quot;);  s=e.style.cssText;</code></li>
</ol>
</li>
<li><p>jQuery知识点  </p>
<ol>
<li><p>获取和设置HTML属性<br><code>attr()</code>方法是jQuery中用于HTML属性的getter/setter。该方法处理浏览器的兼容性和一些特殊情况，还让HTML属性名和JavaScript属性名可以等同使用(当两者存在差异时)。例如，可以使用<code>for</code>也可以使用<code>htmlFor</code>，可以使用<code>class</code>也可以使用<code>className</code>。一个相关函数是<code>removeAttr()</code>,可用来从所有选中元素中移除某个属性。</p>
</li>
<li><p>获取和设置HTML表单值<br><code>val()</code>方法用来设置和获取HTML表单元素的value属性，还可以获取和设置复选框、单选按钮以及<code>&lt;select&gt;</code>元素的选中状态:<br><code>$(&quot;#surname&quot;).val()</code> //获取 surname 文本域的值<br><code>$(#usstate).val()</code> // 从<code>&lt;select&gt;</code>中获取单一值<br><code>$(&quot;#email&quot;).val(&quot;Invalid email address&quot;)</code> //给文本域设置值<br><code>$(&quot;input:checkbox&quot;).val([&quot;opt1&quot;,&quot;opt2&quot;])</code> //选中带有这些名字或值的复选框  </p>
</li>
</ol>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;待提升知识点&quot;&gt;&lt;a href=&quot;#待提升知识点&quot; class=&quot;headerlink&quot; title=&quot;待提升知识点&quot;&gt;&lt;/a&gt;待提升知识点&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;call&lt;/code&gt;以及&lt;code&gt;apply&lt;/code&gt;函数方法的更多应用&lt;/
    
    </summary>
    
      <category term="大前端" scheme="http://yoursite.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>libuv入门</title>
    <link href="http://yoursite.com/2017/05/12/libuv%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2017/05/12/libuv入门/</id>
    <published>2017-05-12T13:21:07.000Z</published>
    <updated>2017-05-12T13:21:07.708Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Linux</title>
    <link href="http://yoursite.com/2017/04/29/Linux/"/>
    <id>http://yoursite.com/2017/04/29/Linux/</id>
    <published>2017-04-29T02:46:54.000Z</published>
    <updated>2017-04-29T02:48:45.226Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux的常用命令"><a href="#Linux的常用命令" class="headerlink" title="Linux的常用命令"></a>Linux的常用命令</h1><ul>
<li>观察系统所有的程序数据 <code>ps aux</code></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Linux的常用命令&quot;&gt;&lt;a href=&quot;#Linux的常用命令&quot; class=&quot;headerlink&quot; title=&quot;Linux的常用命令&quot;&gt;&lt;/a&gt;Linux的常用命令&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;观察系统所有的程序数据 &lt;code&gt;ps aux&lt;/code&gt;&lt;
    
    </summary>
    
      <category term="系统管理" scheme="http://yoursite.com/categories/%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>mysql读书笔记</title>
    <link href="http://yoursite.com/2017/04/17/mysql%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/04/17/mysql读书笔记/</id>
    <published>2017-04-17T11:28:47.000Z</published>
    <updated>2017-04-17T12:57:30.235Z</updated>
    
    <content type="html"><![CDATA[<h1 id="高性能Mysql读书笔记"><a href="#高性能Mysql读书笔记" class="headerlink" title="高性能Mysql读书笔记"></a>高性能Mysql读书笔记</h1><h2 id="Chapter1"><a href="#Chapter1" class="headerlink" title="Chapter1"></a>Chapter1</h2><h3 id="Mysql逻辑架构"><a href="#Mysql逻辑架构" class="headerlink" title="Mysql逻辑架构"></a>Mysql逻辑架构</h3><p><img src="/uploads/images/mysql_logicstructure.png">  </p>
<h3 id="存储引擎的选择"><a href="#存储引擎的选择" class="headerlink" title="存储引擎的选择"></a>存储引擎的选择</h3><ul>
<li><strong>事务</strong><br>  如果应用需要事务支持，InnoDB(或者XtraDB)是目前最稳定并且经过验证的选择。如果不需要事务，并且主要是SELECT和INSERT操作，那么MyISAM是不错的选择。一般日志型的应用比较符合这一特性.</li>
<li><strong>备份</strong><br>  备份的需求也会影响存储引擎的选择。如果可以定期地关闭服务器来执行备份，那么备份的因素可以忽略。反之，如果需要在线热备份，那么选择InnoDB就是基本的要求.</li>
<li><strong>崩溃恢复</strong><br>  数据量比较大的时候，系统崩溃后如何快速的恢复是一个需要考虑的问题。相对而言，MyISAM崩溃后发生损坏的概率比InnoDB要高很多，而且恢复速度也要慢。因此，即使不需要事务支持，很多人也选择InnoDB引擎，这是一个非常重要的因素。</li>
<li><strong>特有的特性</strong><br>  有些应用可能依赖一些存储引擎所特有的特性或者优化，比如很多应用依赖簇族索引的优化。另外，MySQL中也只有MyISAM支持地理空间搜索。</li>
</ul>
<h3 id="转换表的引擎"><a href="#转换表的引擎" class="headerlink" title="转换表的引擎"></a>转换表的引擎</h3><ul>
<li><strong>ALTER TABLE</strong><br>  <code>mysql&gt;ALTER TABLE mytable ENGINE=InnoDB</code><br>  存在问题：执行时间很长。<br>  如果转换表的存储引擎，将会失去和原引擎相关的所有特性。例如，如果将一张InnoDB表转换为MyISAM,然后再转换回InnoDB,原InnoDB表中的所有的外键将丢失。</li>
<li><strong>导出与导入</strong><br>  使用mysqldump工具将数据导出到文件，然后修改文件中CREATE TABLE语句的存储引擎选项。</li>
<li><strong>创建与查询</strong><br>  创建另一张表，并设置存储引擎，分段从源数据库中导入数据。</li>
</ul>
<h2 id="Chapter2"><a href="#Chapter2" class="headerlink" title="Chapter2"></a>Chapter2</h2><p>基准测试(benchmark)是针对系统的一种压力测试。  </p>
<h3 id="基准测试的策略"><a href="#基准测试的策略" class="headerlink" title="基准测试的策略"></a>基准测试的策略</h3><p>两种主要的策略:<br>一种是针对整个系统的整体测试，另外是单独测试MySQL。</p>
<h2 id="Chapter3"><a href="#Chapter3" class="headerlink" title="Chapter3"></a>Chapter3</h2><p>待续</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;高性能Mysql读书笔记&quot;&gt;&lt;a href=&quot;#高性能Mysql读书笔记&quot; class=&quot;headerlink&quot; title=&quot;高性能Mysql读书笔记&quot;&gt;&lt;/a&gt;高性能Mysql读书笔记&lt;/h1&gt;&lt;h2 id=&quot;Chapter1&quot;&gt;&lt;a href=&quot;#Chapt
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>fe-source</title>
    <link href="http://yoursite.com/2017/04/14/fe-source-Flex/"/>
    <id>http://yoursite.com/2017/04/14/fe-source-Flex/</id>
    <published>2017-04-14T02:46:27.000Z</published>
    <updated>2017-04-14T02:56:55.075Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Font-End" scheme="http://yoursite.com/categories/Font-End/"/>
    
    
      <category term="Flex" scheme="http://yoursite.com/tags/Flex/"/>
    
  </entry>
  
  <entry>
    <title>learnNgnix</title>
    <link href="http://yoursite.com/2017/04/13/learnNgnix/"/>
    <id>http://yoursite.com/2017/04/13/learnNgnix/</id>
    <published>2017-04-13T11:49:16.000Z</published>
    <updated>2017-05-12T13:21:47.976Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Begin-to-Learn-Ngnix"><a href="#Begin-to-Learn-Ngnix" class="headerlink" title="Begin to Learn Ngnix"></a>Begin to Learn Ngnix</h1><h2 id="记录个人学习Ngnix历程"><a href="#记录个人学习Ngnix历程" class="headerlink" title="记录个人学习Ngnix历程"></a>记录个人学习Ngnix历程</h2><ol>
<li><p>Windows下的Ngnix启动的一个问题<br>80端口可能会被占用<br>个人解决方法：<code>nginx.conf</code>中的<code>listen 80;</code>直接调整为<code>listen 9000;</code></p>
</li>
<li><p>目前学习到的Ngnix中的基本命令<br>查看进程  <code>tasklist /fi &quot;imagename eq nginx.exe&quot;</code><br>优雅安全关闭  <code>/usr/local/nginx/sbin/nginx -s quit</code><br>运行启动  <code>start nginx</code></p>
</li>
</ol>
<h2 id="Linux-Centos-问题解决指南"><a href="#Linux-Centos-问题解决指南" class="headerlink" title="Linux(Centos)问题解决指南"></a>Linux(Centos)问题解决指南</h2><ol>
<li><p>关于nginx的启动问题<br> nginx的启动命令是：<code>/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</code><br> -c制定配置文件的路径，不加-nginx会自动加载默认路径的配置文件。</p>
</li>
<li><p>查看Ngnix的进程号<br> <code>ps -ef | grep ngnix</code></p>
</li>
</ol>
<p>学习资源：<br><a href="http://tengine.taobao.org/book/" target="_blank" rel="external">nginx平台初探</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Begin-to-Learn-Ngnix&quot;&gt;&lt;a href=&quot;#Begin-to-Learn-Ngnix&quot; class=&quot;headerlink&quot; title=&quot;Begin to Learn Ngnix&quot;&gt;&lt;/a&gt;Begin to Learn Ngnix&lt;/h1&gt;&lt;
    
    </summary>
    
      <category term="Ngnix" scheme="http://yoursite.com/categories/Ngnix/"/>
    
    
      <category term="Ngnix" scheme="http://yoursite.com/tags/Ngnix/"/>
    
  </entry>
  
  <entry>
    <title>熟悉hexo及markdown</title>
    <link href="http://yoursite.com/2017/04/11/%E7%86%9F%E6%82%89hexo%E5%8F%8Amarkdown/"/>
    <id>http://yoursite.com/2017/04/11/熟悉hexo及markdown/</id>
    <published>2017-04-11T11:02:35.000Z</published>
    <updated>2017-04-11T12:31:24.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>人的一切的痛苦，本质上都是对自己无能的愤怒    </p>
<h4 id="王小波"><a href="#王小波" class="headerlink" title="王小波"></a>王小波</h4></blockquote> 一只上海的蝴蝶煽动翅膀后，引起了厦门两个人的龙卷风。世事无常，往往事情的发展<br>    总出人意料，令人啼笑皆非。且不问结果如何，尽自己之所能，积极地面对。古语有<br>    言，尽人事听天命，大概便是如此。<br>    在岁月之巅放牧心灵，山一程，水一程，红尘、沧桑、流年、清欢，一个人的夜晚，我们终于学会了：于一杯淡泊中，笑望两个人的白月光。<br>    <img src="/uploads/images/full-image.jpg" class="full-image"><br><br><br>Vim<br>Bootstrap callout(Header 2)<br><div class="note class_name"><p>Content of bs-callout(without define class style) </p>
</div>
<div class="note default"><p>Content of default bs-callout </p>
</div>
<div class="note primary"><h2 id="Header-2-in-callout"><a href="#Header-2-in-callout" class="headerlink" title="Header 2 in callout"></a>Header 2 in callout</h2><p>Content of <strong>primary</strong> bs-callout </p>
</div>
<div class="note class_name"><p>Content of bs-callout(without define class style) </p>
</div>
<p><strong>下面是一段代码：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s =<span class="string">"Javascript syntax highlighting"</span>;</div><div class="line">alert(s);</div></pre></td></tr></table></figure></p>
<ul>
<li>haha</li>
<li>list</li>
<li>list1</li>
</ul>
<ol>
<li>hello</li>
<li>hello</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">int i=1;</div></pre></td></tr></table></figure>
<p><a href="http://baidu.com" target="_blank" rel="external">百度</a><br><a href="http://baidu.com" target="_blank" rel="external">新浪</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;人的一切的痛苦，本质上都是对自己无能的愤怒    &lt;/p&gt;
&lt;h4 id=&quot;王小波&quot;&gt;&lt;a href=&quot;#王小波&quot; class=&quot;headerlink&quot; title=&quot;王小波&quot;&gt;&lt;/a&gt;王小波&lt;/h
    
    </summary>
    
      <category term="Computer Lanauages" scheme="http://yoursite.com/categories/Computer-Lanauages/"/>
    
    
      <category term="tests" scheme="http://yoursite.com/tags/tests/"/>
    
  </entry>
  
  <entry>
    <title>编程语言瞎写</title>
    <link href="http://yoursite.com/2017/04/08/Test_Fun/"/>
    <id>http://yoursite.com/2017/04/08/Test_Fun/</id>
    <published>2017-04-08T04:57:35.000Z</published>
    <updated>2017-04-08T05:57:17.885Z</updated>
    
    <content type="html"><![CDATA[<h1 id="javascript编写测试"><a href="#javascript编写测试" class="headerlink" title="javascript编写测试"></a>javascript编写测试</h1><p><code>var a = function(){  
    return 1;
}</code></p>
<h1 id="C-编写测试"><a href="#C-编写测试" class="headerlink" title="C#编写测试"></a>C#编写测试</h1><p><code>int i = 1 ;  
    int j =2 ;  
    int k = i + j;</code></p>
<h1 id="python编写测试"><a href="#python编写测试" class="headerlink" title="python编写测试"></a>python编写测试</h1><p><code>def f  
        sorry, forget</code></p>
<h1 id="C编写测试"><a href="#C编写测试" class="headerlink" title="C编写测试"></a>C编写测试</h1><p><code>int count[10];  \
    for(int i=0;i&lt;10;i++){  
        count[i] = i;  
    }   
    printf(&quot;第i个值为&quot;:+count[i]);</code></p>
<h1 id="git验证权限"><a href="#git验证权限" class="headerlink" title="git验证权限"></a>git验证权限</h1><p><code>ssh -T git@github.com</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;javascript编写测试&quot;&gt;&lt;a href=&quot;#javascript编写测试&quot; class=&quot;headerlink&quot; title=&quot;javascript编写测试&quot;&gt;&lt;/a&gt;javascript编写测试&lt;/h1&gt;&lt;p&gt;&lt;code&gt;var a = function
    
    </summary>
    
      <category term="Computer Lanauages" scheme="http://yoursite.com/categories/Computer-Lanauages/"/>
    
    
      <category term="have fun" scheme="http://yoursite.com/tags/have-fun/"/>
    
  </entry>
  
  <entry>
    <title>基于评分系统的规则推荐</title>
    <link href="http://yoursite.com/2017/04/08/%E5%9F%BA%E4%BA%8E%E8%AF%84%E5%88%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%A7%84%E5%88%99%E6%8E%A8%E8%8D%90/"/>
    <id>http://yoursite.com/2017/04/08/基于评分系统的规则推荐/</id>
    <published>2017-04-08T04:47:42.000Z</published>
    <updated>2017-04-08T04:59:43.983Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><ul>
<li><strong>验证可行性</strong></li>
<li><strong>每项评分规则梳理明确</strong></li>
<li><strong>总体评分算法调优</strong></li>
</ul>
<h3 id="总体描述"><a href="#总体描述" class="headerlink" title="总体描述"></a>总体描述</h3><p>推荐系统的依据为评分系统评分后的总分值。<br>每项评分规则人工设定。<br>每项评分规则可以多个纬度。<br>总体评分根据每项评分规则，结合总体评分算法来进行总体评分分值计算。<br>总体评分分值越高，标识相似度越高，越匹配，越应该推荐。</p>
<h3 id="每项评分原则设定"><a href="#每项评分原则设定" class="headerlink" title="每项评分原则设定"></a>每项评分原则设定</h3><ol>
<li>每一项规则设置默认为满分10分，最低分为0分</li>
<li>每条规则满分值越高，重要性越高，总体匹配分值会越高。</li>
<li>规则间的分值设定</li>
</ol>
<ul>
<li>2个规则重要度相近。<br>如果A的优先级稍高于B，则可以设定A规则满分为9分，最低分为0分，B规则为满分为8分，最低分为0分；</li>
<li>2个规则重要度相差较大。<br>如果A的优先级高于B很多，则可以设定A规则满分为9分，最低分为0分，B规则为满分为2分，最低分为0分</li>
</ul>
<h3 id="每项评分规则设定举例"><a href="#每项评分规则设定举例" class="headerlink" title="每项评分规则设定举例"></a>每项评分规则设定举例</h3><p>注：++分值设定均为举例，可以由客户人工设定。++</p>
<ol>
<li><p><strong>合同紧急程度规则</strong><br>假设其中这项规则是++上月合同紧急程度更高++<br>则可将规则设置为：<br>与本合同相比，是上月合同则分值为10分。<br>同月合同分值为0。<br>下月合同分值为-10。</p>
</li>
<li><p><strong>MIC相同规则</strong><br>假设其中这项规则是++MIC必须相同++，则将MIC规则这项设置为MIC相同时，分值为10，MIC不同时，这项规则分值为0。<br>++这里可以更进一步，支持设定MIC优先级++<br>比如维护MIC优先关系分值匹配表： </p>
</li>
</ol>
<ul>
<li>比如MIC相同为10分，</li>
<li>2个MIC比较接近时，该项规则可以在总分的基础上乘以一个系数，系数人工设定。<br>差异度越低，MIC系数越接近1。<br>差异度越高，MIC系数越接近0。  </li>
</ul>
<ol>
<li><strong>一个规则多个纬度</strong><br>比如考虑将材料宽度、材料厚度等设置为同一项规则中，然后通过分值设定，将材料宽度相差多少，材料厚度相差多少进行分值设定。</li>
</ol>
<h3 id="总评分设定"><a href="#总评分设定" class="headerlink" title="总评分设定"></a>总评分设定</h3><ol>
<li>评分制计算<br>系统会提供每条规则计算出的分值的基础上，通过总评分算法设定，计算出基于各规则的总分值。分值越高，匹配度越高，越应该推荐。</li>
<li>总评分算法<br>这个总评分算法是评分系统规则推荐的<strong>关键点</strong>，这个可以根据++客户设定、客户需求++做调试优化。</li>
</ol>
<h3 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h3><ul>
<li><p>每项评分规则设定前提：<br>若不设置某项规则，则推荐评分体系忽视这条规则。<br>若设置某项规则，则根据这项规则评分内容来计算分值。</p>
</li>
<li><p>是否会出现某一项评分规则不合格，但是总评分很高的情况出现，影响选择结果？<br>不会。<br>可以通过算法优化，达到客户希望其中一项不合格，则总分为0的结果。<br><strong>++ 总体来说，总分计算的算法可以根据在一定的算法的基础上，进行适当调优。++</strong></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前提&quot;&gt;&lt;a href=&quot;#前提&quot; class=&quot;headerlink&quot; title=&quot;前提&quot;&gt;&lt;/a&gt;前提&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;验证可行性&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;每项评分规则梳理明确&lt;/strong&gt;&lt;/li&gt;
    
    </summary>
    
    
      <category term="work job" scheme="http://yoursite.com/tags/work-job/"/>
    
  </entry>
  
  <entry>
    <title>hexo_cmd_memo</title>
    <link href="http://yoursite.com/2017/04/07/hexo-cmd-memo/"/>
    <id>http://yoursite.com/2017/04/07/hexo-cmd-memo/</id>
    <published>2017-04-07T12:02:58.000Z</published>
    <updated>2017-04-07T12:10:21.778Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li><p>hexo clean<br>清除Hexo缓存</p>
</li>
<li><p>hexo s –debug  </p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;hexo clean&lt;br&gt;清除Hexo缓存&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;hexo s –debug  &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

    
    </summary>
    
    
  </entry>
  
</feed>
